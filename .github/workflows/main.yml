name: Update Notion with commit links

on:
  push:
    branches:
      - "**"

jobs:
  update-notion:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Get commits payload
        id: commits
        run: |
          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
          echo "${{ toJson(github.event.commits) }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Parse commits and update Notion
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          NOTION_API_VERSION: ${{ secrets.NOTION_API_VERSION || '2022-06-28' }}
          COMMITS: ${{ steps.commits.outputs.COMMITS }}
        run: |
          set -e

          echo "=========================================="
          echo "🔧 CONFIGURATION CHECK"
          echo "Database ID: $NOTION_DATABASE_ID"
          echo "API Version: $NOTION_API_VERSION"
          echo "Token configured: $([ -n "$NOTION_TOKEN" ] && echo 'YES' || echo 'NO')"
          echo "=========================================="
          
          if [ -z "$NOTION_TOKEN" ] || [ -z "$NOTION_DATABASE_ID" ]; then
            echo "❌ ERROR: NOTION_TOKEN or NOTION_DATABASE_ID not set"
            exit 1
          fi

          echo "=========================================="
          echo "📦 COMMITS PAYLOAD"
          echo "=========================================="
          echo "$COMMITS" | jq '.' || echo "⚠️ Warning: COMMITS may be empty or malformed JSON"
          echo "=========================================="
          
          echo "🔄 PROCESSING COMMITS"
          echo "=========================================="

          echo "$COMMITS" | jq -r '.[] | {msg: .message, url: .url} | @base64' | while read row; do
            _jq() { echo "$row" | base64 --decode | jq -r "$1"; }
            MSG=$(_jq '.msg')
            URL=$(_jq '.url')

            echo ""
            echo "📝 Commit Message: $MSG"
            echo "🔗 Commit URL: $URL"

            KEYS=$(echo "$MSG" | grep -oE 'GW-[0-9]+' | sort -u)
            if [ -z "$KEYS" ]; then
              echo "⏭️ No GW-* keys found. Skipping commit."
              continue
            fi
            echo "🎯 Found keys: $KEYS"

            for KEY in $KEYS; do
              echo ""
              echo "----------------------------------------"
              echo "🔍 Processing Key: $KEY"
              echo "----------------------------------------"

              echo "🌐 Querying full database..."
              QUERY_RESPONSE=$(curl -s -X POST "https://api.notion.com/v1/databases/$NOTION_DATABASE_ID/query" \
                -H "Authorization: Bearer $NOTION_TOKEN" \
                -H "Notion-Version: $NOTION_API_VERSION" \
                -H "Content-Type: application/json" \
                --data '{"page_size":100}')

              PAGE_ID=""
              RESULTS=$(echo "$QUERY_RESPONSE" | jq -c '.results[]')
              
              # Loop over all pages to find matching property
              for PAGE in $RESULTS; do
                PAGE_KEY=$(echo "$PAGE" | jq -r '.properties["ID"].rich_text[0].plain_text // empty')
                if [ "$PAGE_KEY" = "$KEY" ]; then
                  PAGE_ID=$(echo "$PAGE" | jq -r '.id')
                  break
                fi
              done

              if [ -z "$PAGE_ID" ]; then
                echo "⚠️ No page found with ID == $KEY. Skipping."
                continue
              fi

              echo "✅ Found Page ID: $PAGE_ID"

              # Read current page content
              CURRENT_PAGE=$(curl -s -X GET "https://api.notion.com/v1/pages/$PAGE_ID" \
                -H "Authorization: Bearer $NOTION_TOKEN" \
                -H "Notion-Version: $NOTION_API_VERSION")

              EXISTING=$(echo "$CURRENT_PAGE" | jq -c '.properties["Github Commit link"].rich_text // []')

              # Create new line
              NEW_LINE=$(jq -nc --arg url "$URL" --arg msg "$MSG" '{
                type: "text",
                text: { content: $msg, link: { url: $url } }
              }')

              # Append with newline if content exists
              if [ "$(echo "$EXISTING" | jq 'length')" -gt 0 ]; then
                SEPARATOR=$(jq -nc '{ type: "text", text: { content: "\n" } }')
                UPDATED=$(echo "$EXISTING" | jq --argjson sep "$SEPARATOR" --argjson new "$NEW_LINE" '. + [$sep, $new]')
              else
                UPDATED=$(echo "$EXISTING" | jq --argjson new "$NEW_LINE" '. + [$new]')
              fi

              # Update page
              UPDATE_PAYLOAD=$(jq -n --argjson rt "$UPDATED" '{
                properties: {
                  "Github Commit link": { rich_text: $rt }
                }
              }')

              curl -s -X PATCH "https://api.notion.com/v1/pages/$PAGE_ID" \
                -H "Authorization: Bearer $NOTION_TOKEN" \
                -H "Notion-Version: $NOTION_API_VERSION" \
                -H "Content-Type: application/json" \
                --data "$UPDATE_PAYLOAD" >/dev/null

              echo "✅ Updated Notion page for $KEY"
            done
          done

          echo "=========================================="
          echo "🎉 FINISHED PROCESSING ALL COMMITS"
          echo "=========================================="
